<!DOCTYPE html>
<meta charset="utf-8">
<style>
  .node circle {
    fill: #999;
  }

  .node text {
    font: 10px sans-serif;
  }

  .node--internal circle {
    fill: #555;
  }

  .node--internal text {
    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;
  }

  .link {
    fill: none;
    stroke: #555;
    stroke-opacity: 0.4;
    stroke-width: 1.5px;
  }
</style>
<svg width="1" height="1"></svg>
<!-- <script src="https://d3js.org/d3.v7.min.js"></script> -->
<script src="https://d3js.org/d3.v7.min.js"></script>
<script>

  const urlPublicada = 'https://docs.google.com/spreadsheets/d/1XgQkNm0y7gl1l2lqqd5FUpHbmmFws57XN-cVTe_lqYs/pub?gid=1345404208&single=true&output=csv'
  const dataMock = {
    name: "Root", children: [
      {
        name: "Issas", children: [
          { name: "I.a" }, { name: "I.b" }, { name: "I.c" }]
      },
      {
        name: "IIdada", children: [
          { name: "II.a" }, { name: "II.b" }]
      },
      {
        name: "IdadaII", children: [
          { name: "III.a" }, { name: "III.b" }, { name: "III.c" }, { name: "III.d" }]
      }
    ]
  };


  const CONSTANT_SEPARATOR = ".";

  // function parseDataToTree(data) {
  //   // Create an empty object for the root node
  //   const tree = { name: "Root", children: [] };

  //   // Loop through each data item
  //   data.forEach((item) => {
  //     // Split the item's id by the separator
  //     const parts = item.id.split(CONSTANT_SEPARATOR);

  //     // Create a reference to the current node in the tree
  //     let currentNode = tree;

  //     // Loop through each part of the id
  //     for (let i = 0; i < parts.length; i++) {
  //       const name = parts[i];
  //       debugger;
  //       let childNode = currentNode.children?.find((child) => child.name === name);

  //       // If child doesn't exist, create a new one
  //       if (!childNode) {
  //         childNode = { name };
  //         currentNode.children.push(childNode);
  //       }

  //       // Update current node for the next iteration
  //       currentNode = childNode;
  //     }

  //     // Add additional properties to the last node (leaf)
  //     currentNode.color = item.color;
  //     currentNode.url = item.url;
  //   });

  //   return tree;
  // }


  // function parseDataToTree(data) {
  //   // No need for the initial root node creation
  //   // let currentNode = tree;

  //   const children = []; // Store parsed nodes (excluding root)

  //   data.forEach((item) => {
  //     const parts = item.id.split(CONSTANT_SEPARATOR);
  //     let parentNode = null; // Track parent node for child insertion

  //     for (let i = 0; i < parts.length; i++) {
  //       const name = parts[i];
  //       const childIndex = children.findIndex(child => child.name === name);

  //       if (childIndex === -1) { // New node encountered
  //         const node = { name, children: [], depth: i }; // Set depth based on level
  //         children.push(node);
  //         parentNode = node;
  //       } else {
  //         parentNode = children[childIndex]; // Update parent reference
  //       }
  //     }

  //     parentNode.color = item.color; // Assign color to the final node
  //     parentNode.url = item.url; // Assign url to the final node
  //   });

  //   return children[0]; // Return the first child (previously root node 0)
  // }

  function parseDataToTree(data) {
    const tree = { name: "Root", children: [], depth: 0 }; // Start with root depth at 0

    data.forEach((item) => {
      const parts = item.id.split(CONSTANT_SEPARATOR);
      let currentNode = tree;
      let currentDepth = 1; // Track depth for each node

      for (let i = 0; i < parts.length; i++) {
        const name = parts[i];
        const childIndex = currentNode.children.findIndex(child => child.name === name);

        if (childIndex === -1) {
          currentNode.children.push({ name, children: [], depth: currentDepth });
          currentNode = currentNode.children[currentNode.children.length - 1];
        } else {
          currentNode = currentNode.children[childIndex];
        }

        currentDepth++; // Increment depth for each level
      }

      currentNode.color = item.color;
      currentNode.url = item.url;
    });

    return tree;
  }

  const width = 1000;
  const heigth = 800;
  const colors = d3.scaleOrdinal(d3.schemeCategory10);
  var NODE_SIZE = 50; // AJUSTAR TAMAÃ‘O DE NODOS

  const nodes = [];
  const links = [];

  const FORCE_CONST = {
    str: 0.3,
    distance: 125,
    node_size_ratio: .8
  }

  const SIZE_REDUCTION = 0.8;// cada depgth reduce algo el size en 10% seria 0.9,

  let data = [];


  // GENERAL
  const svg = d3.select("body")
    .append("svg")
    .attr("width", width)
    .attr("height", heigth);

  // AUX UTILS
  function expand(node, s) {
    console.log(`Expand ${node.name}, expanded: ${node.expanded}`);
    if (!node.expanded) {
      (node.children || []).forEach(function (child) {
        console.log(`  - child ${child.name}`);
        child.parent = node;
        // pop up around the "parent" node
        child.x = node.x;
        child.y = node.y;
        // add the node, and its link to the "parent"
        nodes.push(child);
        debugger
        links.push({ source: node, target: child });


      });
      node.expanded = true;
    }
  }




  // START


  const initGraph = async (dataRaw) => {
    data = parseDataToTree(dataRaw ?? []);// dataMock || 
    console.log("data paseada", data)



    const force = d3.forceSimulation()
      .force("charge", d3.forceManyBody())
      .force("x", d3.forceX(width / 2))
      .force("y", d3.forceY(heigth / 2));

    // at first, add the top node, and its children by using expand()

    nodes.push(data);
    expand(data);
    setup(data);

    function setup() {
      force.nodes(nodes);
      //   force.force("link",
      //      d3.forceLink(links).strength(1).distance());
      force.force("link", d3.forceLink(links).strength(FORCE_CONST.str).distance(FORCE_CONST.distance));
      force.force("collide", d3.forceCollide().radius(NODE_SIZE * FORCE_CONST.node_size_ratio));
      // SOLUTION: do not use variables for the links
      svg.selectAll("line.link")
        .data(links)
        .enter().insert("line")
        // SOLUTION: add the class attribute
        .attr("class", 'link')
        .style("stroke", "#999")
        .style("stroke-width", "1px");

      // SOLUTION: do not use variables for the nodes
      var N = svg.selectAll("circle.node")
        .data(nodes)
        .enter()


      var container = N.append("g")


      var circle = container.append("circle")
        // SOLUTION: add the class attribute
        .attr("class", "node")
        // .attr("r", d=> {debugger; return NODE_SIZE})
        .attr("r", function (d) {
          return NODE_SIZE * Math.pow(SIZE_REDUCTION, d.depth); // Reduce size by 10% for each depth level
        })
        .style("fill", function (d) {
          return colors(d.parent && d.parent.name);
        })
        .style("cursor", d => d.children.length && "pointer")
        .style("stroke", "#000")
        .on("click", function (event, node) {
          force.stop();
          expand(node);
          setup();
          // SOLUTION: reset alpha, for the simulation to actually run again
          if (force.alpha() < 0.05) {
            force.alpha(0.05);
          }
          force.restart();
        });

      var text = container.append("text")
        // .attr("x", "0")
        // .attr("y", "0")
        .attr("text-anchor", "middle")
        .attr("dominant-baseline", "middle")
        .style('pointer-events', 'none')//no click
        .text(function (d) { return d.name; })
        .style("font-size", function (d) { return d.children ? "14px" : "12px"; }) // Make text larger for internal nodes
        .style("fill", "black");


        //los q tengan url
      container.filter(function (d) { return d.url; })
        .append("image")
        .attr("class", "nodeUrl")
        .attr("xlink:href", "https://cdn-icons-png.flaticon.com/512/117/117725.png") // Replace with your desired icon URL
        .attr("width", "24px")
        .attr("height", "24px")
        .style("opacity", 0.7)
        .style("cursor", "pointer")
        .on("click", function (event, node) {
          console.log("abriendo", node.url);
          window.open(node.url, '_blank');
        });





      // Add an icon with the URL if the `.url` field exists

      // force.on("end", function (e) {

      //   //update text pos
      //   svg.selectAll("circle.node").enter().select("text").attr("x", function (d) { return d.x; })
      //     .attr("y", function (d) { return d.y; });
      // });


      force.on("tick", function (e) {
        // SOLUTION: do not use variables for the links and nodes
        svg.selectAll("line.link")
          .attr("x1", function (d) { return d.source.x; })
          .attr("y1", function (d) { return d.source.y; })
          .attr("x2", function (d) { return d.target.x; })
          .attr("y2", function (d) { return d.target.y; });

        svg.selectAll("circle.node")
          .attr("cx", function (d) { return d.x; })
          .attr("cy", function (d) { return d.y; })
        // .select("text") // Select the text element within each circle
        // .attr("x", function (d) { return d.x; }) // Update text x based on circle's x
        // .attr("y", function (d) { return d.y; }); // Update text y based on circle's y

        // text.attr("x", function (d) { return d.x; })
        //   .attr("y", function (d) { return d.y; });


        svg.selectAll("text")
          .attr("x", function (d) { return d.x; })
          .attr("y", function (d) { return d.y; })

        svg.selectAll(".nodeUrl")
          .attr("x", function (d) { return d.x; })
          .attr("y", function (d) { return d.y; })

        //   container.attr("transform", d => `translate(${d.x},${d.y})`);
        // container.attr("x", function (d) { return d.x; })
        //   .attr("y", function (d) { return d.y; });

      });
    }


  }

  d3.csv(urlPublicada)
    .then(data => {
      console.log("data de gugel", data);
      // debugger;
      setTimeout(async () => initGraph(data), 5);

      // root = d3.hierarchy(data[0]); // Assuming data[0] is the root node
      // root.x0 = height / 2;
      // root.y0 = 0;
      // update(root);
    })
    .catch(error => {
      console.error("Error loading data:", error);
    });








</script>

<body></body>
